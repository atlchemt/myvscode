{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Debug": {
			"prefix": "debug",
			"body": [
			"std::cout << \"$1 : \" << $1 << std::endl;"
			],
			"description": "debug"
		},
	"try": {
		"prefix": "try",
		"body": [
			"try {",
			"\t${1:}",
			"}",
			"catch (const std::exception&) {",
			"\t${0:}",
			"}"
			],
		"description": "try catch"
	},
	"Include Guard": {
        "prefix": "guard",
        "body": [
            "#ifndef $1",
            "#define $1",
            "#endif /* $1 */"
		],
		"description": "Include Guard"
	},
	"imshow": {
        "prefix": "imshow",
        "body": [
			"cv::namedWindow(\"$1\", cv::WINDOW_KEEPRATIO | cv::WINDOW_NORMAL);",
			"cv::imshow(\"$1\", $2);",
			"cv::waitKey(0);",
			"cv::destroyAllWindows();"
		],
		"description": "imshow set"
	},
	"for": {
		"prefix": "for",
		"body": [
				"for(${1:type} ${2:index} = 0; ${2:index} < ${3:length}; ${2:index}++){",
				"\t${0:}",
				"}"
				],
		"description": "for"
	},
	"rfor": {
		"prefix": "rfor",
		"body": [
				"for(auto& ${1:variable} : ${2:range}){",
				"\t${0:}",
				"}"
				],
		"description": "'range-based for"
	},
	"if": {
		"prefix": "if",
		"body": [
				"if(${1:true}){",
				"\t${0:}",
				"}"
				],
		"description": "if"
	},
	"while": {
		"prefix": "while",
		"body": [
				"while(${1:expression}){",
				"\t${0:}",
				"}"
				],
		"description": "while"
	}
}